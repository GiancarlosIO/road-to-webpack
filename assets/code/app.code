/* eslint-disable import/no-extraneous-dependencies */
const path = require('path');
const webpack = require('webpack');
const merge = require('webpack-merge');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');


// loaders
const {
  style,
} = require('../loaders/');

// configurations
const {
  productionMode,
  STATIC_URL,
  devServer,
  entries,
} = require('../configuration');

const BASE_CONFIG = require('./base');

module.exports = merge(BASE_CONFIG, {
  entry: entries,
  output: {
    path: path.join(__dirname, '../../../static/js/'),
    publicPath: productionMode ? `${STATIC_URL}js/` : devServer.publicPath,
    filename: '[name].min.js',
    chunkFilename: `[name].${productionMode ? '[hash].' : ''}chunk.js`,
  },

  module: {
    rules: [
      {
        test: style.TEST,
        use: productionMode ? [
          MiniCssExtractPlugin.loader,
          ...style.cleanLoaders,
        ] : style.defaultLoaders,
      },
    ],
  },

  plugins: [
    new webpack.DllReferencePlugin({
      context: __dirname,
      manifest: require('../../jsx/dll/vendor-manifest.json'), // eslint-disable-line
    }),

    new MiniCssExtractPlugin({
      filename: '[name].min.css',
    }),
  ],
});
/* eslint-disable import/no-extraneous-dependencies */
const path = require('path');
const webpack = require('webpack');
const merge = require('webpack-merge');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');


// loaders
const {
  style,
} = require('../loaders/');

// configurations
const {
  productionMode,
  STATIC_URL,
  devServer,
  entries,
} = require('../configuration');

const BASE_CONFIG = require('./base');

module.exports = merge(BASE_CONFIG, {
  entry: entries,
  output: {
    path: path.join(__dirname, '../../../static/js/'),
    publicPath: productionMode ? `${STATIC_URL}js/` : devServer.publicPath,
    filename: '[name].min.js',
    chunkFilename: `[name].${productionMode ? '[hash].' : ''}chunk.js`,
  },

  module: {
    rules: [
      {
        test: style.TEST,
        use: productionMode ? [
          MiniCssExtractPlugin.loader,
          ...style.cleanLoaders,
        ] : style.defaultLoaders,
      },
    ],
  },

  plugins: [
    new webpack.DllReferencePlugin({
      context: __dirname,
      manifest: require('../../jsx/dll/vendor-manifest.json'), // eslint-disable-line
    }),

    new MiniCssExtractPlugin({
      filename: '[name].min.css',
    }),
  ],
});
